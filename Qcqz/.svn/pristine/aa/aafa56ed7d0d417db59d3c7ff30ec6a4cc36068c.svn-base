package com.qcqz.dao;

import java.util.List;

import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.criterion.Example;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;

import com.qcqz.domain.Tstudent;

/**
 * A data access object (DAO) providing persistence and search support for
 * Student entities. Transaction control of the save(), update() and delete()
 * operations can directly support Spring container-managed transactions or they
 * can be augmented to handle user-managed Spring transactions. Each of these
 * methods provides additional information for how to configure it for the
 * desired type of transaction control.
 * 
 * @see com.qcqz.domain.Tstudent
 * @author MyEclipse Persistence Tools
 */
@Repository("studentDAO")
public class StudentDAO extends BaseGenericDataAccessor<Tstudent,Integer> {
	private static final Logger log = LoggerFactory.getLogger(StudentDAO.class);
	// property constants
	public static final String NAME = "name";
	public static final String CODE = "code";
	public static final String BIRTHDAY = "birthday";
	public static final String PY = "py";
	public static final String GENDER = "gender";
	public static final String USED_NAME = "usedName";
	public static final String FATHER_NAME = "fatherName";
	public static final String FATHER_MOBILE = "fatherMobile";
	public static final String MOTHER_NAME = "motherName";
	public static final String MOTHER_MOBILE = "motherMobile";
	public static final String OTHER_CONNECT = "otherConnect";
	public static final String OTHER_CONNECT_MOBILE = "otherConnectMobile";
	public static final String ADDRESS = "address";
	public static final String SCHOOL = "school";
	public static final String TEACHER_ID = "teacherId";
	public static final String USER_ID = "userId";
	public static final String PICTURE = "picture";
	public static final String PICTURE_ID = "pictureId";


	public void delete(Tstudent persistentInstance) {
		log.debug("deleting Student instance");
		try {
			getSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public Tstudent findById(java.lang.Integer id) {
		log.debug("getting Student instance with id: " + id);
		try {
			Tstudent instance = (Tstudent) getSession().get(
					"com.qcqz.domain.Student", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List findByExample(Tstudent instance) {
		log.debug("finding Student instance by example");
		try {
			List results = getSession()
					.createCriteria("com.qcqz.domain.Student")
					.add(Example.create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public List findByProperty(String propertyName, Object value) {
		log.debug("finding Student instance with property: " + propertyName
				+ ", value: " + value);
		try {
			String queryString = "from Student as model where model."
					+ propertyName + "= ?";
			Query queryObject = getSession().createQuery(queryString);
			queryObject.setParameter(0, value);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	public List findByName(Object name) {
		return findByProperty(NAME, name);
	}

	public List findByCode(Object code) {
		return findByProperty(CODE, code);
	}

	public List findByBirthday(Object birthday) {
		return findByProperty(BIRTHDAY, birthday);
	}

	public List findByPy(Object py) {
		return findByProperty(PY, py);
	}

	public List findByGender(Object gender) {
		return findByProperty(GENDER, gender);
	}

	public List findByUsedName(Object usedName) {
		return findByProperty(USED_NAME, usedName);
	}

	public List findByFatherName(Object fatherName) {
		return findByProperty(FATHER_NAME, fatherName);
	}

	public List findByFatherMobile(Object fatherMobile) {
		return findByProperty(FATHER_MOBILE, fatherMobile);
	}

	public List findByMotherName(Object motherName) {
		return findByProperty(MOTHER_NAME, motherName);
	}

	public List findByMotherMobile(Object motherMobile) {
		return findByProperty(MOTHER_MOBILE, motherMobile);
	}

	public List findByOtherConnect(Object otherConnect) {
		return findByProperty(OTHER_CONNECT, otherConnect);
	}

	public List findByOtherConnectMobile(Object otherConnectMobile) {
		return findByProperty(OTHER_CONNECT_MOBILE, otherConnectMobile);
	}

	public List findByAddress(Object address) {
		return findByProperty(ADDRESS, address);
	}

	public List findBySchool(Object school) {
		return findByProperty(SCHOOL, school);
	}

	public List findByTeacherId(Object teacherId) {
		return findByProperty(TEACHER_ID, teacherId);
	}

	public List findByUserId(Object userId) {
		return findByProperty(USER_ID, userId);
	}

	public List findByPicture(Object picture) {
		return findByProperty(PICTURE, picture);
	}

	public List findByPictureId(Object pictureId) {
		return findByProperty(PICTURE_ID, pictureId);
	}

	public List findAll() {
		log.debug("finding all Student instances");
		try {
			String queryString = "from Student";
			Query queryObject = getSession().createQuery(queryString);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	public Tstudent merge(Tstudent detachedInstance) {
		log.debug("merging Student instance");
		try {
			Tstudent result = (Tstudent) getSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public void attachDirty(Tstudent instance) {
		log.debug("attaching dirty Student instance");
		try {
			getSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(Tstudent instance) {
		log.debug("attaching clean Student instance");
		try {
			getSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}
}